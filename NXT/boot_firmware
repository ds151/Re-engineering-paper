#!/usr/bin/env python

from __future__ import division
import sys
import os.path
import struct

nxt_path = os.path.join(
    os.path.split(os.path.abspath(__file__))[0], 'nxos', 'pynxt')
sys.path = [nxt_path]+sys.path

import nxt
import nxt.samba
import nxt.flash

USAGE = '''
Syntax: %(n)s <kernel binary file>
        %(n)s <kernel name> <boot type>

Examples:
        %(n)s systems/tests/tests_samba.bin
        %(n)s tests rom
'''.strip()


class Error(Exception):
    """Exception base class for this program."""


class FileNotFound(Error):
    """File not found"""


class FileTooSmall(Error):
    """File is too small to be a firmware"""


class InvalidHeader(Error):
    """Firmware has invalid header"""


class BrickNotFound(Error):
    """NXT was not found"""

class UploadCurruption(Error):
    """Data was currupted during upload"""

class Firmware(object):
    HEADER_DEF = '<5LB'
    HEADER_SIZE = struct.calcsize(HEADER_DEF)

    def __init__(self, file):
        self.path = file

        if not os.path.isfile(file):
            raise FileNotFound('No file named "%s" was found.' % file)

        f = open(file)
        fw_and_header = f.read()
        f.close()

        header = fw_and_header[-self.HEADER_SIZE:]
        self.firmware = fw_and_header[:-self.HEADER_SIZE]

        (magic, self.ramsize, self.romsize, self.writeaddr,
         self.loadaddr, self.samba) = struct.unpack(self.HEADER_DEF, header)
        self.samba = bool(self.samba)
        if magic != 0xDEADBEEF:
            raise InvalidHeader('Bad magic on header')


def upload_and_boot(firmware):
    s = nxt.samba.SambaBrick()
    try:
        s.open(timeout=60)
    except nxt.samba.SambaOpenError, e:
        raise BrickNotFound()

    if firmware.samba:
        s.write_buffer(firmware.writeaddr, firmware.firmware)
        ret = s.read_buffer(firmware.writeaddr, len(firmware.firmware))
        if firmware.firmware != ret:
            raise UploadCurruption()
    else:
        f = nxt.flash.FlashController(s)
        f.flash(firmware.firmware)

    s.jump(firmware.loadaddr)
    s.close()


def find_all_firmwares(root):
    firmwares = []
    for root, dirs, files in os.walk(root):
        for f in files:
            if f.endswith('.bin'):
                try:
                    firmware = Firmware(os.path.join(root, f))
                except Error:
                    pass
                else:
                    firmwares.append(firmware)
    firmwares.sort(key=lambda f: f.path)
    return firmwares


def display_firmwares(firmwares):
    def find_divergence_idx(a, b):
        prefix = os.path.commonprefix([a, b]).rfind('/')
        return max(prefix, 0)

    previous = ''
    print 'Available firmwares:'
    print
    for i, firmware in enumerate(firmwares):
        idx = find_divergence_idx(previous, firmware.path)
        print ' %2d. %s%s' % (i+1, ' '*idx, firmware.path[idx:])
        previous = firmware.path
    print


def ask_number(prompt, limit):
    while True:
        answer = raw_input(prompt)
        try:
            answer = int(answer)
        except ValueError:
            print 'Please enter a number.'
            continue

        if answer <= 0 or answer > limit:
            print 'Please enter a number between 1 and %d' % limit
            continue

        return answer


def main():
    if len(sys.argv) > 2:
        print USAGE % sys.argv[0]
        return 2

    if len(sys.argv) == 2:
        f = Firmware(sys.argv[1])
    else:
        firmwares = find_all_firmwares('./')
        if not firmwares:
            print 'No firmwares compiled, nothing to boot.'
            return 1

        display_firmwares(firmwares)
        choice = ask_number('Select firmware to boot: ', len(firmwares)) - 1
        f = firmwares[choice]

    print 'Uploading and booting...'
    upload_and_boot(f)
    print 'Done.'

    return 0

if __name__ == '__main__':
    sys.exit(main())
